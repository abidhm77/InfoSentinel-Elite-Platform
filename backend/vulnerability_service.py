import random
import datetime
import uuid
from flask import jsonify

class VulnerabilityService:
    def __init__(self):
        self.vulnerabilities = self._generate_mock_vulnerabilities()
        
    def get_all_vulnerabilities(self):
        """Return all vulnerabilities"""
        return jsonify(self.vulnerabilities)
    
    def get_vulnerability_by_id(self, vuln_id):
        """Return a specific vulnerability by ID"""
        vulnerability = next((v for v in self.vulnerabilities if v['id'] == vuln_id), None)
        if vulnerability:
            return jsonify(vulnerability)
        return jsonify({"error": "Vulnerability not found"}), 404
    
    def update_vulnerability_status(self, vuln_id, new_status):
        """Update the status of a vulnerability"""
        vulnerability = next((v for v in self.vulnerabilities if v['id'] == vuln_id), None)
        if not vulnerability:
            return jsonify({"error": "Vulnerability not found"}), 404
            
        if new_status not in ['open', 'in-progress', 'resolved']:
            return jsonify({"error": "Invalid status. Must be 'open', 'in-progress', or 'resolved'"}), 400
            
        vulnerability['status'] = new_status
        vulnerability['updated'] = datetime.datetime.now().isoformat()
        
        return jsonify(vulnerability)
    
    def _generate_mock_vulnerabilities(self):
        """Generate mock vulnerability data"""
        severities = ['high', 'medium', 'low', 'info']
        statuses = ['open', 'in-progress', 'resolved']
        titles = [
            'SQL Injection Vulnerability',
            'Cross-Site Scripting (XSS)',
            'Insecure Direct Object Reference',
            'Cross-Site Request Forgery (CSRF)',
            'Security Misconfiguration',
            'Sensitive Data Exposure',
            'Missing Function Level Access Control',
            'Unvalidated Redirects and Forwards',
            'Using Components with Known Vulnerabilities',
            'Insufficient Logging & Monitoring'
        ]
        
        descriptions = [
            'SQL injection is a code injection technique that might destroy your database.',
            'XSS attacks occur when an attacker uses a web application to send malicious code.',
            'A direct object reference occurs when a developer exposes a reference to an internal implementation object.',
            'CSRF is an attack that forces an end user to execute unwanted actions on a web application.',
            'Security misconfiguration is the most commonly seen issue, due to insecure default configurations.',
            'Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials.',
            'Most web applications verify function level access rights before making that functionality visible in the UI.',
            'Web applications frequently redirect and forward users to other pages and websites.',
            'Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application.',
            'Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response.'
        ]
        
        remediations = [
            'Use prepared statements with parameterized queries.',
            'Filter input on arrival. Encode data on output. Use appropriate response headers.',
            'Use indirect object references or check access for the direct references.',
            'Include the CSRF token in a hidden field for requests that transfer state.',
            'Implement security hardening across the entire application stack.',
            'Encrypt all sensitive data at rest and in transit. Don\'t store sensitive data unnecessarily.',
            'Enforce access control checks consistently across the application.',
            'Avoid using redirects and forwards. If used, don\'t involve user parameters in calculating destination.',
            'Remove unused dependencies. Regularly monitor sources like CVE and NVD for vulnerabilities.',
            'Implement effective monitoring and alerting. Establish incident response and recovery plans.'
        ]
        
        technical_details = [
            'Vulnerability found in login.php, line 42. The query is constructed using string concatenation.',
            'Reflected XSS in search.php. User input is directly rendered in the response without sanitization.',
            'User IDs in the URL can be manipulated to access other user\'s data.',
            'Form submission does not include anti-CSRF token.',
            'Default admin credentials are still enabled on the production server.',
            'Password reset tokens are transmitted over unencrypted HTTP.',
            'Admin functions accessible by changing the "role" parameter in the request.',
            'Redirect parameter in URL can be set to any external domain.',
            'Using jQuery v1.8.3 which has known XSS vulnerabilities.',
            'Failed login attempts are not logged or monitored for brute force attacks.'
        ]
        
        # Generate 20 mock vulnerabilities
        vulnerabilities = []
        for i in range(20):
            severity_index = random.randint(0, len(severities) - 1)
            status_index = random.randint(0, len(statuses) - 1)
            title_index = random.randint(0, len(titles) - 1)
            
            # Generate a random date within the last 30 days
            discovered_date = datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 30))
            
            # Generate a random date after the discovered date for the last update
            days_since_discovery = (datetime.datetime.now() - discovered_date).days
            updated_date = discovered_date + datetime.timedelta(days=random.randint(0, max(1, days_since_discovery)))
            
            vulnerability = {
                'id': f'VULN-{1000 + i}',
                'title': titles[title_index],
                'severity': severities[severity_index],
                'status': statuses[status_index],
                'discovered': discovered_date.isoformat(),
                'updated': updated_date.isoformat(),
                'description': descriptions[title_index],
                'remediation': remediations[title_index],
                'technical': technical_details[title_index]
            }
            
            vulnerabilities.append(vulnerability)
            
        return vulnerabilities