import React, { useState, useEffect, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ExclamationTriangleIcon,
  ShieldExclamationIcon,
  BugAntIcon,
  ClockIcon,
  ChartBarIcon,
  FunnelIcon,
  ArrowPathIcon,
  DocumentTextIcon,
  EyeIcon,
  CheckCircleIcon
} from '@heroicons/react/24/outline';
import { useInView } from 'react-intersection-observer';
import { Canvas, useFrame } from '@react-three/fiber';
import { Sphere, Text, OrbitControls } from '@react-three/drei';
import '../styles/cyberpunk-design-system.css';
import { useSpring, animated } from '@react-spring/web';

// 3D Risk Assessment Visualization
function RiskAssessment3D({ vulnerabilities }) {
  const riskData = useMemo(() => {
    return vulnerabilities.map((vuln, index) => ({
      ...vuln,
      x: (vuln.exploitability || Math.random()) * 10 - 5,
      y: (vuln.impact || Math.random()) * 10 - 5,
      z: (vuln.likelihood || Math.random()) * 10 - 5,
      color: vuln.severity === 'critical' ? '#FF073A' :
             vuln.severity === 'high' ? '#FF8C00' :
             vuln.severity === 'medium' ? '#FFD700' : '#4A90E2'
    }));
  }, [vulnerabilities]);
  
  function RiskSphere({ data }) {
    const meshRef = React.useRef();
    
    useFrame((state) => {
      if (meshRef.current) {
        meshRef.current.rotation.y = state.clock.elapsedTime * 0.1;
      }
    });
    
    return (
      <group ref={meshRef}>
        {data.map((point, index) => (
          <Sphere
            key={index}
            position={[point.x, point.y, point.z]}
            args={[0.2, 16, 16]}
          >
            <meshStandardMaterial 
              color={point.color} 
              transparent 
              opacity={0.8}
              emissive={point.color}
              emissiveIntensity={0.2}
            />
          </Sphere>
        ))}
        
        {/* Axis labels */}
        <Text
          position={[6, 0, 0]}
          fontSize={0.5}
          color="#00F5FF"
          anchorX="center"
          anchorY="middle"
        >
          Exploitability
        </Text>
        <Text
          position={[0, 6, 0]}
          fontSize={0.5}
          color="#00F5FF"
          anchorX="center"
          anchorY="middle"
        >
          Impact
        </Text>
        <Text
          position={[0, 0, 6]}
          fontSize={0.5}
          color="#00F5FF"
          anchorX="center"
          anchorY="middle"
        >
          Likelihood
        </Text>
      </group>
    );
  }
  
  return (
    <div className="h-96 w-full glass-strong">
      <Canvas camera={{ position: [10, 10, 10] }}>
        <ambientLight intensity={0.5} />
        <pointLight position={[10, 10, 10]} />
        <RiskSphere data={riskData} />
        <OrbitControls enableZoom={true} />
      </Canvas>
    </div>
  );
}

// Severity Heat Map
function SeverityHeatMap({ vulnerabilities }) {
  const [selectedCell, setSelectedCell] = useState(null);
  
  const heatMapData = useMemo(() => {
    const categories = ['Web App', 'Network', 'System', 'Database', 'API', 'Mobile'];
    const severities = ['critical', 'high', 'medium', 'low'];
    
    const data = categories.map(category => {
      return severities.map(severity => {
        const count = vulnerabilities.filter(v => 
          v.category === category && v.severity === severity
        ).length;
        return {
          category,
          severity,
          count,
          intensity: Math.min(count / 5, 1) // Normalize to 0-1
        };
      });
    });
    
    return data;
  }, [vulnerabilities]);
  
  const getSeverityColor = (severity, intensity) => {
    const colors = {
      critical: `rgba(255, 7, 58, ${0.3 + intensity * 0.7})`,
      high: `rgba(255, 140, 0, ${0.3 + intensity * 0.7})`,
      medium: `rgba(255, 215, 0, ${0.3 + intensity * 0.7})`,
      low: `rgba(74, 144, 226, ${0.3 + intensity * 0.7})`
    };
    return colors[severity];
  };
  
  return (
    <div className="glass p-6 rounded-2xl">
      <div className="flex items-center mb-6">
        <ChartBarIcon className="w-6 h-6 text-cyber-blue mr-2" />
        <h3 className="text-xl font-semibold gradient-text">Vulnerability Heat Map</h3>
      </div>
      
      <div className="overflow-x-auto">
        <div className="grid grid-cols-5 gap-2 min-w-max">
          {/* Header row */}
          <div></div>
          {['Critical', 'High', 'Medium', 'Low'].map(severity => (
            <div key={severity} className="text-center text-sm font-medium text-text-secondary p-2">
              {severity}
            </div>
          ))}
          
          {/* Data rows */}
          {heatMapData.map((categoryRow, categoryIndex) => (
            <React.Fragment key={categoryIndex}>
              <div className="text-sm font-medium text-text-secondary p-2 flex items-center">
                {categoryRow[0].category}
              </div>
              {categoryRow.map((cell, cellIndex) => (
                <motion.div
                  key={`${categoryIndex}-${cellIndex}`}
                  className="relative h-16 rounded-lg cursor-pointer border border-bg-tertiary"
                  style={{ backgroundColor: getSeverityColor(cell.severity, cell.intensity) }}
                  whileHover={{ scale: 1.05 }}
                  onClick={() => setSelectedCell(cell)}
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: (categoryIndex * 4 + cellIndex) * 0.05 }}
                >
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-lg font-bold text-white">{cell.count}</span>
                  </div>
                  
                  {cell.count > 0 && (
                    <motion.div
                      className="absolute inset-0 rounded-lg"
                      animate={{ 
                        boxShadow: [
                          '0 0 0px rgba(0, 245, 255, 0)',
                          '0 0 20px rgba(0, 245, 255, 0.5)',
                          '0 0 0px rgba(0, 245, 255, 0)'
                        ]
                      }}
                      transition={{ duration: 2, repeat: Infinity }}
                    />
                  )}
                </motion.div>
              ))}
            </React.Fragment>
          ))}
        </div>
      </div>
      
      {/* Legend */}
      <div className="mt-6 flex items-center justify-between text-sm text-text-secondary">
        <span>Vulnerability Count</span>
        <div className="flex items-center space-x-4">
          <span>Low</span>
          <div className="w-20 h-2 bg-gradient-to-r from-bg-tertiary to-cyber-blue rounded-full" />
          <span>High</span>
        </div>
      </div>
      
      {/* Selected Cell Details */}
      <AnimatePresence>
        {selectedCell && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="mt-4 p-4 bg-bg-glass-strong rounded-lg border border-cyber-blue/30"
          >
            <div className="flex items-center justify-between mb-2">
              <span className="font-medium text-text-primary">
                {selectedCell.category} - {selectedCell.severity.charAt(0).toUpperCase() + selectedCell.severity.slice(1)}
              </span>
              <button
                onClick={() => setSelectedCell(null)}
                className="text-text-tertiary hover:text-text-primary"
              >
                Ã—
              </button>
            </div>
            <div className="text-sm text-text-secondary">
              {selectedCell.count} vulnerabilities found in this category
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// Attack Path Visualization
function AttackPathVisualization({ vulnerabilities }) {
  const [selectedPath, setSelectedPath] = useState(0);
  
  const attackPaths = useMemo(() => {
    // Generate attack paths based on vulnerabilities
    return [
      {
        id: 1,
        name: 'Web Application Compromise',
        steps: [
          { name: 'Reconnaissance', description: 'Port scan reveals web server', status: 'completed' },
          { name: 'SQL Injection', description: 'Exploit login form vulnerability', status: 'completed' },
          { name: 'Privilege Escalation', description: 'Abuse database permissions', status: 'in-progress' },
          { name: 'Lateral Movement', description: 'Access internal systems', status: 'pending' },
          { name: 'Data Exfiltration', description: 'Extract sensitive data', status: 'pending' }
        ],
        severity: 'critical',
        likelihood: 'high'
      },
      {
        id: 2,
        name: 'Network Infiltration',
        steps: [
          { name: 'Network Scan', description: 'Discover open services', status: 'completed' },
          { name: 'Service Exploitation', description: 'Exploit vulnerable SSH service', status: 'completed' },
          { name: 'System Access', description: 'Gain shell access', status: 'pending' },
          { name: 'Persistence', description: 'Install backdoor', status: 'pending' }
        ],
        severity: 'high',
        likelihood: 'medium'
      }
    ];
  }, [vulnerabilities]);
  
  const getStepColor = (status) => {
    switch (status) {
      case 'completed': return 'critical-red';
      case 'in-progress': return 'high-orange';
      case 'pending': return 'info-gray';
      default: return 'info-gray';
    }
  };
  
  return (
    <div className="glass p-6 rounded-2xl">
      <div className="flex items-center mb-6">
        <ArrowPathIcon className="w-6 h-6 text-cyber-blue mr-2" />
        <h3 className="text-xl font-semibold gradient-text">Attack Path Analysis</h3>
      </div>
      
      {/* Path Selector */}
      <div className="flex space-x-2 mb-6">
        {attackPaths.map((path, index) => (
          <motion.button
            key={path.id}
            onClick={() => setSelectedPath(index)}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${
              selectedPath === index
                ? 'bg-cyber-blue text-bg-primary'
                : 'bg-bg-glass text-text-secondary hover:text-text-primary'
            }`}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            {path.name}
          </motion.button>
        ))}
      </div>
      
      {/* Selected Path Visualization */}
      <AnimatePresence mode="wait">
        <motion.div
          key={selectedPath}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ duration: 0.3 }}
        >
          <div className="mb-4">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-lg font-semibold text-text-primary">
                {attackPaths[selectedPath].name}
              </h4>
              <div className="flex items-center space-x-2">
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  attackPaths[selectedPath].severity === 'critical' ? 'bg-critical-red/20 text-critical-red' :
                  'bg-high-orange/20 text-high-orange'
                }`}>
                  {attackPaths[selectedPath].severity.toUpperCase()}
                </span>
                <span className="text-sm text-text-secondary">
                  Likelihood: {attackPaths[selectedPath].likelihood}
                </span>
              </div>
            </div>
          </div>
          
          {/* Attack Steps */}
          <div className="space-y-4">
            {attackPaths[selectedPath].steps.map((step, stepIndex) => (
              <motion.div
                key={stepIndex}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: stepIndex * 0.1 }}
                className="relative"
              >
                <div className="flex items-start space-x-4">
                  {/* Step indicator */}
                  <div className="relative">
                    <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center ${
                      step.status === 'completed' ? 'bg-critical-red border-critical-red' :
                      step.status === 'in-progress' ? 'bg-high-orange border-high-orange animate-pulse' :
                      'bg-transparent border-info-gray'
                    }`}>
                      {step.status === 'completed' && (
                        <CheckCircleIcon className="w-4 h-4 text-white" />
                      )}
                      {step.status === 'in-progress' && (
                        <div className="w-2 h-2 bg-white rounded-full" />
                      )}
                      {step.status === 'pending' && (
                        <div className="w-2 h-2 bg-info-gray rounded-full" />
                      )}
                    </div>
                    
                    {/* Connection line */}
                    {stepIndex < attackPaths[selectedPath].steps.length - 1 && (
                      <div className={`absolute top-8 left-1/2 transform -translate-x-1/2 w-0.5 h-8 ${
                        step.status === 'completed' ? 'bg-critical-red' : 'bg-info-gray'
                      }`} />
                    )}
                  </div>
                  
                  {/* Step content */}
                  <div className="flex-1 pb-8">
                    <div className="flex items-center justify-between mb-1">
                      <h5 className="font-medium text-text-primary">{step.name}</h5>
                      <span className={`text-xs px-2 py-1 rounded-full ${
                        step.status === 'completed' ? 'bg-critical-red/20 text-critical-red' :
                        step.status === 'in-progress' ? 'bg-high-orange/20 text-high-orange' :
                        'bg-info-gray/20 text-info-gray'
                      }`}>
                        {step.status.replace('-', ' ').toUpperCase()}
                      </span>
                    </div>
                    <p className="text-sm text-text-secondary">{step.description}</p>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </AnimatePresence>
    </div>
  );
}

// Timeline View
function TimelineView({ vulnerabilities }) {
  const timelineData = useMemo(() => {
    return vulnerabilities
      .sort((a, b) => new Date(b.discoveredAt) - new Date(a.discoveredAt))
      .slice(0, 10); // Show last 10 discoveries
  }, [vulnerabilities]);
  
  return (
    <motion.div 
      className="glass-strong p-6 rounded-2xl"
      initial={{ opacity: 0, x: -50 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 1, ease: 'easeOut' }}
    >
      <div className="flex items-center mb-6">
        <ClockIcon className="w-6 h-6 text-cyber-blue mr-2" />
        <h3 className="text-xl font-semibold gradient-text">Discovery Timeline</h3>
      </div>
      
      <div className="space-y-4 max-h-96 overflow-y-auto">
        {timelineData.map((vuln, index) => (
          <motion.div
            key={vuln.id}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.05 }}
            className="flex items-start space-x-4 p-3 bg-bg-glass-subtle rounded-lg border-l-4 border-cyber-blue"
          >
            <div className="flex-shrink-0">
              <div className={`w-3 h-3 rounded-full ${
                vuln.severity === 'critical' ? 'bg-critical-red' :
                vuln.severity === 'high' ? 'bg-high-orange' :
                vuln.severity === 'medium' ? 'bg-medium-yellow' :
                'bg-low-blue'
              }`} />
            </div>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-center justify-between mb-1">
                <h4 className="text-sm font-medium text-text-primary truncate">
                  {vuln.name}
                </h4>
                <span className="text-xs text-text-tertiary">
                  {new Date(vuln.discoveredAt).toLocaleTimeString()}
                </span>
              </div>
              <p className="text-xs text-text-secondary">{vuln.location}</p>
            </div>
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
}

// Remediation Priority Matrix
function RemediationPriorityMatrix({ vulnerabilities }) {
  const [sortBy, setSortBy] = useState('priority');
  
  const sortedVulnerabilities = useMemo(() => {
    const sorted = [...vulnerabilities].sort((a, b) => {
      switch (sortBy) {
        case 'priority':
          const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
          return priorityOrder[b.severity] - priorityOrder[a.severity];
        case 'impact':
          return (b.impact || 0) - (a.impact || 0);
        case 'effort':
          return (a.remediationEffort || 0) - (b.remediationEffort || 0);
        default:
          return 0;
      }
    });
    return sorted.slice(0, 8); // Show top 8
  }, [vulnerabilities, sortBy]);
  
  return (
    <div className="glass p-6 rounded-2xl">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <FunnelIcon className="w-6 h-6 text-cyber-blue mr-2" />
          <h3 className="text-xl font-semibold gradient-text">Remediation Priority</h3>
        </div>
        
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          className="bg-bg-glass border border-cyber-blue/30 rounded-lg px-3 py-1 text-sm text-text-primary focus:outline-none focus:border-cyber-blue"
        >
          <option value="priority">Priority</option>
          <option value="impact">Impact</option>
          <option value="effort">Effort</option>
        </select>
      </div>
      
      <div className="space-y-3">
        {sortedVulnerabilities.map((vuln, index) => (
          <motion.div
            key={vuln.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.05 }}
            className="flex items-center justify-between p-4 bg-bg-glass-subtle rounded-lg border border-bg-tertiary hover:border-cyber-blue/50 transition-colors duration-200"
          >
            <div className="flex items-center space-x-4">
              <div className="text-lg font-bold text-text-tertiary">#{index + 1}</div>
              
              <div>
                <h4 className="font-medium text-text-primary">{vuln.name}</h4>
                <p className="text-sm text-text-secondary">{vuln.location}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-center">
                <div className="text-xs text-text-tertiary">Impact</div>
                <div className="text-sm font-medium text-text-primary">
                  {vuln.impact || Math.floor(Math.random() * 10) + 1}/10
                </div>
              </div>
              
              <div className="text-center">
                <div className="text-xs text-text-tertiary">Effort</div>
                <div className="text-sm font-medium text-text-primary">
                  {vuln.remediationEffort || Math.floor(Math.random() * 5) + 1}/5
                </div>
              </div>
              
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                vuln.severity === 'critical' ? 'bg-critical-red/20 text-critical-red' :
                vuln.severity === 'high' ? 'bg-high-orange/20 text-high-orange' :
                vuln.severity === 'medium' ? 'bg-medium-yellow/20 text-medium-yellow' :
                'bg-low-blue/20 text-low-blue'
              }`}>
                {vuln.severity.toUpperCase()}
              </span>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );
}

// Main Vulnerability Results Display
export default function VulnerabilityResultsDisplay({ scanResults }) {
  const [ref, inView] = useInView({ threshold: 0.1 });
  const [activeTab, setActiveTab] = useState('overview');
  
  // Mock vulnerability data - replace with real scan results
  const vulnerabilities = scanResults || [
    {
      id: 1,
      name: 'SQL Injection in Login Form',
      severity: 'critical',
      category: 'Web App',
      location: '/login.php',
      discoveredAt: new Date(Date.now() - 1000 * 60 * 5).toISOString(),
      impact: 9,
      exploitability: 8,
      likelihood: 7,
      remediationEffort: 3
    },
    {
      id: 2,
      name: 'Cross-Site Scripting (XSS)',
      severity: 'high',
      category: 'Web App',
      location: '/search.php',
      discoveredAt: new Date(Date.now() - 1000 * 60 * 10).toISOString(),
      impact: 6,
      exploitability: 7,
      likelihood: 8,
      remediationEffort: 2
    },
    {
      id: 3,
      name: 'Weak SSH Configuration',
      severity: 'medium',
      category: 'Network',
      location: '192.168.1.100:22',
      discoveredAt: new Date(Date.now() - 1000 * 60 * 15).toISOString(),
      impact: 5,
      exploitability: 4,
      likelihood: 6,
      remediationEffort: 4
    },
    {
      id: 4,
      name: 'Information Disclosure',
      severity: 'low',
      category: 'Web App',
      location: '/admin/config.php',
      discoveredAt: new Date(Date.now() - 1000 * 60 * 20).toISOString(),
      impact: 3,
      exploitability: 2,
      likelihood: 4,
      remediationEffort: 1
    }
  ];
  
  const tabs = [
    { id: 'overview', name: 'Overview', icon: ChartBarIcon },
    { id: 'heatmap', name: 'Heat Map', icon: BugAntIcon },
    { id: 'attack-paths', name: 'Attack Paths', icon: ArrowPathIcon },
    { id: 'timeline', name: 'Timeline', icon: ClockIcon },
    { id: 'remediation', name: 'Remediation', icon: ShieldExclamationIcon }
  ];
  
  return (
    <div ref={ref} className="min-h-screen bg-space-gradient p-6">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -30 }}
        animate={inView ? { opacity: 1, y: 0 } : {}}
        transition={{ duration: 0.6 }}
        className="text-center mb-8"
      >
        <h1 className="text-display font-bold gradient-text mb-4">
          Vulnerability Analysis Results
        </h1>
        <p className="text-lg text-text-secondary max-w-2xl mx-auto">
          Comprehensive security assessment with advanced visualization and risk analysis
        </p>
      </motion.div>
      
      {/* Summary Stats */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={inView ? { opacity: 1, y: 0 } : {}}
        transition={{ duration: 0.6, delay: 0.2 }}
        className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"
      >
        {[
          { label: 'Total Vulnerabilities', value: vulnerabilities.length, color: 'cyber-blue' },
          { label: 'Critical', value: vulnerabilities.filter(v => v.severity === 'critical').length, color: 'critical-red' },
          { label: 'High Risk', value: vulnerabilities.filter(v => v.severity === 'high').length, color: 'high-orange' },
          { label: 'Risk Score', value: '8.5/10', color: 'medium-yellow' }
        ].map((stat, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.4 + index * 0.1 }}
            className="glass p-6 rounded-xl text-center"
          >
            <div className={`text-3xl font-bold text-${stat.color} mb-2`}>{stat.value}</div>
            <div className="text-sm text-text-secondary">{stat.label}</div>
          </motion.div>
        ))}
      </motion.div>
      
      {/* Tab Navigation */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={inView ? { opacity: 1, y: 0 } : {}}
        transition={{ duration: 0.6, delay: 0.6 }}
        className="flex space-x-2 mb-8 overflow-x-auto"
      >
        {tabs.map((tab) => (
          <motion.button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-300 whitespace-nowrap ${
              activeTab === tab.id
                ? 'bg-cyber-blue text-bg-primary'
                : 'bg-bg-glass text-text-secondary hover:text-text-primary hover:bg-bg-glass-strong'
            }`}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <tab.icon className="w-5 h-5" />
            <span>{tab.name}</span>
          </motion.button>
        ))}
      </motion.div>
      
      {/* Tab Content */}
      <AnimatePresence mode="wait">
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.3 }}
        >
          {activeTab === 'overview' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <div>
                <h3 className="text-xl font-semibold gradient-text mb-4">3D Risk Assessment</h3>
                <div className="glass p-6 rounded-2xl">
                  <RiskAssessment3D vulnerabilities={vulnerabilities} />
                </div>
              </div>
              <div className="space-y-8">
                <TimelineView vulnerabilities={vulnerabilities} />
              </div>
            </div>
          )}
          
          {activeTab === 'heatmap' && (
            <SeverityHeatMap vulnerabilities={vulnerabilities} />
          )}
          
          {activeTab === 'attack-paths' && (
            <AttackPathVisualization vulnerabilities={vulnerabilities} />
          )}
          
          {activeTab === 'timeline' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <TimelineView vulnerabilities={vulnerabilities} />
              <RemediationPriorityMatrix vulnerabilities={vulnerabilities} />
            </div>
          )}
          
          {activeTab === 'remediation' && (
            <RemediationPriorityMatrix vulnerabilities={vulnerabilities} />
          )}
        </motion.div>
      </AnimatePresence>
    </div>
  );
}