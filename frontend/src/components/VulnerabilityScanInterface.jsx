import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  MagnifyingGlassIcon,
  PlayIcon,
  PauseIcon,
  StopIcon,
  CpuChipIcon,
  ShieldExclamationIcon,
  GlobeAltIcon,
  ServerIcon,
  CodeBracketIcon,
  BugAntIcon,
  LockClosedIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import { useInView } from 'react-intersection-observer';
import '../styles/cyberpunk-design-system.css';
import { useSpring, animated } from '@react-spring/web';

// Target Input with Auto-Complete
function TargetInput({ value, onChange, suggestions, onSuggestionSelect }) {
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [filteredSuggestions, setFilteredSuggestions] = useState([]);
  
  useEffect(() => {
    if (value && suggestions) {
      const filtered = suggestions.filter(suggestion => 
        suggestion.toLowerCase().includes(value.toLowerCase())
      );
      setFilteredSuggestions(filtered);
      setShowSuggestions(filtered.length > 0 && value.length > 2);
    } else {
      setShowSuggestions(false);
    }
  }, [value, suggestions]);
  
  return (
    <motion.div 
      className="relative glass-strong"
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8, ease: 'easeOut' }}
    >
      <div className="relative">
        <input
          type="text"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder="Enter target URL, IP, or domain..."
          className="w-full px-6 py-4 bg-bg-glass border border-cyber-blue/30 rounded-xl text-text-primary placeholder-text-tertiary focus:border-cyber-blue focus:outline-none focus:ring-2 focus:ring-cyber-blue/20 transition-all duration-300 font-mono text-lg backdrop-blur-md"
        />
        <MagnifyingGlassIcon className="absolute right-4 top-1/2 transform -translate-y-1/2 w-6 h-6 text-cyber-blue" />
      </div>
      
      <AnimatePresence>
        {showSuggestions && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full left-0 right-0 mt-2 bg-bg-secondary border border-cyber-blue/30 rounded-xl overflow-hidden z-50 backdrop-blur-md"
          >
            {filteredSuggestions.map((suggestion, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.05 }}
                onClick={() => {
                  onSuggestionSelect(suggestion);
                  setShowSuggestions(false);
                }}
                className="px-4 py-3 hover:bg-bg-glass cursor-pointer text-text-secondary hover:text-text-primary transition-colors duration-200 border-b border-bg-tertiary last:border-b-0"
              >
                {suggestion}
              </motion.div>
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}

// Scan Type Selector
function ScanTypeSelector({ selectedType, onTypeSelect }) {
  const scanTypes = [
    {
      id: 'quick',
      name: 'Quick Scan',
      description: 'Fast vulnerability assessment',
      icon: BugAntIcon,
      duration: '2-5 minutes',
      techniques: ['Port Scan', 'Service Detection', 'Basic Vulns'],
      color: 'matrix-green'
    },
    {
      id: 'comprehensive',
      name: 'Comprehensive Scan',
      description: 'Deep security analysis',
      icon: ShieldExclamationIcon,
      duration: '15-30 minutes',
      techniques: ['Full Port Scan', 'Web App Testing', 'Advanced Exploits'],
      color: 'cyber-blue'
    },
    {
      id: 'stealth',
      name: 'Stealth Scan',
      description: 'Low-profile reconnaissance',
      icon: LockClosedIcon,
      duration: '10-20 minutes',
      techniques: ['SYN Scan', 'Fragmented Packets', 'Timing Evasion'],
      color: 'neon-purple'
    },
    {
      id: 'web-app',
      name: 'Web Application',
      description: 'Focused web security testing',
      icon: GlobeAltIcon,
      duration: '20-45 minutes',
      techniques: ['SQL Injection', 'XSS', 'CSRF', 'Auth Bypass'],
      color: 'high-orange'
    }
  ];
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      {scanTypes.map((type, index) => (
        <motion.div
          key={type.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
          onClick={() => onTypeSelect(type.id)}
          className={`relative p-6 rounded-2xl cursor-pointer transition-all duration-300 border-2 ${
            selectedType === type.id
              ? `border-${type.color} bg-bg-glass-strong glow-${type.color.split('-')[0]}`
              : 'border-bg-tertiary bg-bg-glass hover:border-cyber-blue/50'
          }`}
        >
          <div className="text-center">
            <type.icon className={`w-12 h-12 mx-auto mb-4 ${
              selectedType === type.id ? `text-${type.color}` : 'text-text-secondary'
            }`} />
            
            <h3 className={`text-lg font-semibold mb-2 ${
              selectedType === type.id ? `text-${type.color}` : 'text-text-primary'
            }`}>
              {type.name}
            </h3>
            
            <p className="text-sm text-text-secondary mb-4">
              {type.description}
            </p>
            
            <div className="text-xs text-text-tertiary mb-3">
              Duration: {type.duration}
            </div>
            
            <div className="space-y-1">
              {type.techniques.map((technique, techIndex) => (
                <div key={techIndex} className="text-xs bg-bg-tertiary px-2 py-1 rounded-full text-text-secondary">
                  {technique}
                </div>
              ))}
            </div>
          </div>
          
          {selectedType === type.id && (
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              className="absolute top-2 right-2 w-6 h-6 bg-cyber-blue rounded-full flex items-center justify-center"
            >
              <div className="w-2 h-2 bg-bg-primary rounded-full" />
            </motion.div>
          )}
        </motion.div>
      ))}
    </div>
  );
}

// Real-time Progress Visualizer
function ProgressVisualizer({ isScanning, progress, currentTechnique, discoveredVulns }) {
  const [animatedProgress, setAnimatedProgress] = useState(0);
  
  useEffect(() => {
    if (isScanning) {
      const interval = setInterval(() => {
        setAnimatedProgress(prev => {
          if (prev < progress) {
            return Math.min(prev + 1, progress);
          }
          return prev;
        });
      }, 50);
      
      return () => clearInterval(interval);
    }
  }, [progress, isScanning]);
  
  if (!isScanning && progress === 0) {
    return null;
  }
  
  return (
    <motion.div
      initial={{ opacity: 0, height: 0 }}
      animate={{ opacity: 1, height: 'auto' }}
      exit={{ opacity: 0, height: 0 }}
      className="glass p-6 rounded-xl"
    >
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-heading font-semibold gradient-text">Scan Progress</h3>
        <div className="text-xl font-mono text-cyber-blue">{animatedProgress}%</div>
      </div>
      
      {/* Progress Bar */}
      <div className="relative h-3 bg-bg-tertiary rounded-full mb-6 overflow-hidden">
        <motion.div
          className="absolute top-0 left-0 h-full bg-gradient-to-r from-cyber-blue to-matrix-green rounded-full"
          initial={{ width: 0 }}
          animate={{ width: `${animatedProgress}%` }}
          transition={{ duration: 0.5, ease: "easeOut" }}
        />
        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer" />
      </div>
      
      {/* Current Technique */}
      <div className="mb-6">
        <div className="flex items-center mb-2">
          <CpuChipIcon className="w-5 h-5 text-cyber-blue mr-2" />
          <span className="text-sm text-text-secondary">Current Technique:</span>
        </div>
        <motion.div
          key={currentTechnique}
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          className="font-mono text-lg text-text-primary"
        >
          {currentTechnique}
        </motion.div>
      </div>
      
      {/* Live Vulnerability Discovery */}
      <div>
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center">
            <ExclamationTriangleIcon className="w-5 h-5 text-high-orange mr-2" />
            <span className="text-sm text-text-secondary">Vulnerabilities Found:</span>
          </div>
          <span className="text-lg font-bold text-high-orange">{discoveredVulns.length}</span>
        </div>
        
        <div className="max-h-32 overflow-y-auto space-y-2">
          <AnimatePresence>
            {discoveredVulns.map((vuln, index) => (
              <motion.div
                key={vuln.id}
                initial={{ opacity: 0, x: -20, scale: 0.8 }}
                animate={{ opacity: 1, x: 0, scale: 1 }}
                exit={{ opacity: 0, x: 20, scale: 0.8 }}
                transition={{ delay: index * 0.1 }}
                className={`p-3 rounded-lg border-l-4 bg-bg-glass-subtle ${
                  vuln.severity === 'critical' ? 'border-critical-red' :
                  vuln.severity === 'high' ? 'border-high-orange' :
                  vuln.severity === 'medium' ? 'border-medium-yellow' :
                  'border-low-blue'
                }`}
              >
                <div className="flex items-center justify-between">
                  <span className="font-medium text-text-primary">{vuln.type}</span>
                  <span className={`text-xs px-2 py-1 rounded-full ${
                    vuln.severity === 'critical' ? 'bg-critical-red/20 text-critical-red' :
                    vuln.severity === 'high' ? 'bg-high-orange/20 text-high-orange' :
                    vuln.severity === 'medium' ? 'bg-medium-yellow/20 text-medium-yellow' :
                    'bg-low-blue/20 text-low-blue'
                  }`}>
                    {vuln.severity.toUpperCase()}
                  </span>
                </div>
                <div className="text-sm text-text-secondary mt-1">{vuln.location}</div>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      </div>
    </motion.div>
  );
}

// AI Agent Activity Monitor
function AIAgentMonitor({ agents, isScanning }) {
  return (
    <motion.div 
      className="glass-strong p-6 rounded-xl"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.8, delay: 0.2 }}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <CpuChipIcon className="w-5 h-5 text-cyber-blue mr-2" />
          <h3 className="text-heading font-semibold gradient-text">AI Agents</h3>
        </div>
        <span className="text-xs text-text-tertiary">{agents.filter(a => a.active).length} active</span>
      </div>
      
      <div className="space-y-4">
        {agents.map((agent, index) => (
          <motion.div
            key={agent.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="flex items-center justify-between p-4 bg-bg-glass-subtle rounded-lg border border-cyber-blue/20"
          >
            <div className="flex items-center">
              <div className={`w-3 h-3 rounded-full mr-3 ${
                isScanning && agent.active ? 'bg-matrix-green animate-pulse-glow' : 'bg-info-gray'
              }`} />
              
              <div>
                <div className="font-medium text-text-primary">{agent.name}</div>
                <div className="text-sm text-text-secondary">
                  {isScanning && agent.active ? agent.currentTask : 'Standby'}
                </div>
              </div>
            </div>
            
            <div className="text-right">
              <div className="text-sm font-mono text-cyber-blue">
                {isScanning && agent.active ? `${agent.progress}%` : 'Ready'}
              </div>
              <div className="text-xs text-text-tertiary">
                {isScanning && agent.active ? agent.technique : agent.specialty}
              </div>
            </div>
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
}

// Main Vulnerability Scan Interface
export default function VulnerabilityScanInterface() {
  const [ref, inView] = useInView({ threshold: 0.1 });
  const [target, setTarget] = useState('');
  const [selectedScanType, setSelectedScanType] = useState('comprehensive');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [currentTechnique, setCurrentTechnique] = useState('');
  const [discoveredVulns, setDiscoveredVulns] = useState([]);
  
  // Mock suggestions for auto-complete
  const suggestions = [
    'example.com',
    'testphp.vulnweb.com',
    'demo.testfire.net',
    '192.168.1.1',
    '10.0.0.1',
    'localhost:3000',
    'api.example.com',
    'admin.example.com'
  ];
  
  // Mock AI agents
  const [agents] = useState([
    {
      id: 1,
      name: 'Port Scanner',
      specialty: 'Network Discovery',
      active: true,
      currentTask: 'Scanning ports 1-65535',
      progress: 65,
      technique: 'TCP SYN Scan'
    },
    {
      id: 2,
      name: 'Web Tester',
      specialty: 'Web Application Security',
      active: true,
      currentTask: 'Testing SQL injection vectors',
      progress: 40,
      technique: 'SQLMap'
    },
    {
      id: 3,
      name: 'Exploit Engine',
      specialty: 'Vulnerability Exploitation',
      active: false,
      currentTask: 'Analyzing discovered vulnerabilities',
      progress: 0,
      technique: 'Metasploit'
    }
  ]);
  
  // Mock scanning simulation
  useEffect(() => {
    if (isScanning) {
      const techniques = [
        'Port Discovery',
        'Service Enumeration',
        'Vulnerability Detection',
        'Web Application Testing',
        'SQL Injection Testing',
        'XSS Detection',
        'Authentication Bypass',
        'Privilege Escalation',
        'Final Analysis'
      ];
      
      const interval = setInterval(() => {
        setScanProgress(prev => {
          const newProgress = Math.min(prev + Math.random() * 5, 100);
          
          // Update current technique
          const techniqueIndex = Math.floor((newProgress / 100) * techniques.length);
          setCurrentTechnique(techniques[techniqueIndex] || 'Finalizing scan...');
          
          // Randomly discover vulnerabilities
          if (Math.random() > 0.95 && discoveredVulns.length < 8) {
            const vulnTypes = ['SQL Injection', 'XSS', 'CSRF', 'Path Traversal', 'Command Injection', 'XXE'];
            const severities = ['critical', 'high', 'medium', 'low'];
            const locations = ['Login Form', 'Search Function', 'API Endpoint', 'File Upload', 'Admin Panel'];
            
            const newVuln = {
              id: Date.now(),
              type: vulnTypes[Math.floor(Math.random() * vulnTypes.length)],
              severity: severities[Math.floor(Math.random() * severities.length)],
              location: locations[Math.floor(Math.random() * locations.length)]
            };
            
            setDiscoveredVulns(prev => [...prev, newVuln]);
          }
          
          if (newProgress >= 100) {
            setIsScanning(false);
            setCurrentTechnique('Scan completed');
          }
          
          return newProgress;
        });
      }, 200);
      
      return () => clearInterval(interval);
    }
  }, [isScanning, discoveredVulns.length]);
  
  const startScan = () => {
    if (!target.trim()) return;
    
    setIsScanning(true);
    setScanProgress(0);
    setDiscoveredVulns([]);
    setCurrentTechnique('Initializing scan...');
  };
  
  const stopScan = () => {
    setIsScanning(false);
    setScanProgress(0);
    setCurrentTechnique('');
  };
  
  return (
    <div ref={ref} className="min-h-screen bg-space-gradient p-6">
      {/* Compact Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={inView ? { opacity: 1, y: 0 } : {}}
        transition={{ duration: 0.6 }}
        className="mb-8"
      >
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-display font-bold gradient-text mb-2">
              Vulnerability Scanner
            </h1>
            <p className="text-body text-text-secondary">
              AI-powered security assessment with real-time threat detection
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="btn-ghost px-4 py-2 text-sm"
            >
              Scan History
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="btn-cyber px-4 py-2 text-sm"
            >
              Quick Scan
            </motion.button>
          </div>
        </div>
      </motion.div>
      
      {/* Target Configuration */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={inView ? { opacity: 1, y: 0 } : {}}
        transition={{ duration: 0.6, delay: 0.2 }}
        className="mb-6"
      >
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 grid-responsive">
          {/* Target Input */}
          <div className="lg:col-span-2">
            <div className="glass p-6 rounded-xl">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-heading font-semibold gradient-text">Target Configuration</h3>
                <div className="flex items-center space-x-2">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={startScan}
                    disabled={!target.trim() || isScanning}
                    className="btn-cyber px-4 py-2 text-sm disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                  >
                    <PlayIcon className="w-4 h-4" />
                    <span>{isScanning ? 'Scanning...' : 'Start Scan'}</span>
                  </motion.button>
                  
                  {isScanning && (
                    <motion.button
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={stopScan}
                      className="btn-ghost px-4 py-2 text-sm flex items-center space-x-2"
                    >
                      <StopIcon className="w-4 h-4" />
                      <span>Stop</span>
                    </motion.button>
                  )}
                </div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-text-secondary mb-2">
                  Target URL, IP Address, or Domain
                </label>
                <TargetInput
                  value={target}
                  onChange={setTarget}
                  suggestions={suggestions}
                  onSuggestionSelect={setTarget}
                />
              </div>
            </div>
          </div>
          
          {/* Scan Type Selector */}
          <div className="lg:col-span-1">
            <div className="glass p-6 rounded-xl h-full">
              <h3 className="text-heading font-semibold gradient-text mb-4">Scan Type</h3>
              <div className="space-y-3">
                {[
                  { id: 'quick', name: 'Quick Scan', desc: '2-5 min', icon: BugAntIcon },
                  { id: 'comprehensive', name: 'Deep Scan', desc: '15-30 min', icon: ShieldExclamationIcon },
                  { id: 'stealth', name: 'Stealth', desc: '10-20 min', icon: LockClosedIcon },
                  { id: 'web-app', name: 'Web App', desc: '20-45 min', icon: GlobeAltIcon }
                ].map((type) => (
                  <motion.button
                    key={type.id}
                    onClick={() => setSelectedScanType(type.id)}
                    className={`w-full p-3 rounded-lg text-left transition-all duration-300 border ${
                      selectedScanType === type.id
                        ? 'border-cyber-blue bg-cyber-blue/10 text-cyber-blue'
                        : 'border-bg-tertiary bg-bg-glass hover:border-cyber-blue/50'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className="flex items-center space-x-3">
                      <type.icon className="w-5 h-5" />
                      <div>
                        <div className="font-medium text-sm">{type.name}</div>
                        <div className="text-xs text-text-secondary">{type.desc}</div>
                      </div>
                    </div>
                  </motion.button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </motion.div>
      
      {/* Progress and Results Section */}
      <AnimatePresence>
        {(isScanning || scanProgress > 0) && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 grid-responsive"
          >
            <div className="lg:col-span-2">
              <ProgressVisualizer
                isScanning={isScanning}
                progress={scanProgress}
                currentTechnique={currentTechnique}
                discoveredVulns={discoveredVulns}
              />
            </div>
            
            <div>
              <AIAgentMonitor agents={agents} isScanning={isScanning} />
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}